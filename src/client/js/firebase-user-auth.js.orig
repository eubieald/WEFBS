import showToast from "./components/toast"; // Import showToast as the default export

// Firebase imports
import { initializeApp, FirebaseError } from "firebase/app";
import {
  getFirestore,
  collection,
  onSnapshot,
  addDoc,
  deleteDoc,
  doc,
  getDoc,
  query,
  where,
  orderBy,
  serverTimestamp,
  updateDoc,
} from "firebase/firestore";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updateProfile,
  signOut,
  onAuthStateChanged,
  sendPasswordResetEmail,
} from "firebase/auth";

import firebaseConfig from "@firebase.config";

const app = initializeApp(firebaseConfig);

// init services
const db = getFirestore();
const auth = getAuth();

const getErrorMessage = (error) => {
  if (error instanceof FirebaseError) {
    return error.message.replace(/^firebase:\s*/i, "");
    // Now, errorMessage contains the specific error message
  } else return error;
};

function authenticateUser(email, password) {
  return new Promise(async (resolve, reject) => {
    try {
      // Use Firebase Authentication to sign in and get the ID token
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();

      // Send the ID token to the server for verification
      const response = await fetch("/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // "X-CSRF-Token": csrfToken, // Add the CSRF token
        },
        body: JSON.stringify({ idToken }),
      });

      if (response.ok) {
        window.history.replaceState(null, "", "/dashboard");
        window.location.replace("/dashboard");

        resolve("Authentication successful");
      } else {
        reject("Authentication failed");
      }
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      reject(errorMessage);
    }
  });
}

// Event Handlers
document.addEventListener("DOMContentLoaded", function () {
  // form submit
  const loginForm = document.querySelector("#login-form");
  // login form submit handler function for firebase auth
  
  loginForm.addEventListener("submit", (e) => {
    e.preventDefault(); // prevent form from submitting
    const email = loginForm.email.value; // get email value from form
    const password = loginForm.password.value; // get password value from form
    // const csrfToken = loginForm.csrfToken.value; // Todo: Add CSRF token

    authenticateUser(email, password)
      .then(() => {
        // Handle success
        window.location.href = "/dashboard";
      })
      .catch((error) => {
        showToast(getErrorMessage(error), "error");
      });
  });

  const registrationForm = document.querySelector("#registration-form");
  // registration form submit handler function for firebase auth
  registrationForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const email = registrationForm.email.value;
    const password = registrationForm.password.value;
    const name = registrationForm.name.value;

    try {
      const cred = await createUserWithEmailAndPassword(auth, email, password);
      const user = cred.user;

      // Check if the user object is available before updating profile
      if (user) {
        await updateProfile(user, {
          displayName: name,
        });

        // Reset the form
        registrationForm.reset();
        showToast("Registration Successful", "success");
      } else {
        throw new Error("User object not available");
      }
    } catch (error) {
      showToast(getErrorMessage(error), "error");
    }
  });

  const logoutForm = document.querySelector("#logout-form");
  if (logoutForm) {
    logoutForm.addEventListener("submit", (e) => {
      window.history.replaceState(null, null, "/");
      window.location.replace("/");
    });
  }
});
